{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeed",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_addressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf373108068f64e5f685c16ab6469dd87d8e3125e56cccd40d9f96293c7cfad1a",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "909964",
    "logsBloom": "0x
    "blockHash": "0x1291ec23927851bc95c144996d6672b86b2d9d4a28313c00d016f6f24f259ace",
    "transactionHash": "0xf373108068f64e5f685c16ab6469dd87d8e3125e56cccd40d9f96293c7cfad1a",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "909964",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "49fe842754ea763a668d1ca8871ad003",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_addressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Patrick Collins\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{},\"title\":\"A sample Funding Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"Funds our contract based on the ETH/USD price\"}},\"notice\":\"This contract is for creating a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// 1. Pragma\\npragma solidity ^0.8.0;\\n// 2. Imports\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\n// 3. Interfaces, Libraries, Contracts\\n// error FundMe__NotOwner();\\n\\n/**@title A sample Funding Contract\\n * @author Patrick Collins\\n * @notice This contract is for creating a sample funding contract\\n * @dev This implements price feeds as our library\\n */\\ncontract FundMe {\\n    // Type Declarations\\n    using PriceConverter for uint;\\n\\n    // State variables\\n    uint public constant MINIMUM_USD = 50 * (10**18); // ethers.utils.parseEther(\\\"\\\")\\n    address private immutable i_owner;\\n    address[] private s_funders;\\n    mapping(address => uint) public s_addressToAmountFunded;\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    // Events (we have none!)\\n\\n    // Modifiers\\n    modifier onlyOwner() {\\n        require(msg.sender == i_owner);\\n        // if (msg.sender != i_owner){\\n        //     revert //FundMe__NotOwner;//();\\n        // }\\n        _;\\n    }\\n\\n    // Functions Order:\\n    //// constructor\\n    //// receive\\n    //// fallback\\n    //// external\\n    //// public\\n    //// internal\\n    //// private\\n    //// view / pure\\n\\n    constructor(address priceFeed) {\\n        s_priceFeed = AggregatorV3Interface(priceFeed);\\n        i_owner = msg.sender;\\n    }\\n\\n    /// @notice Funds our contract based on the ETH/USD price\\n    function fund() public payable {\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n            \\\"You need to spend more ETH!\\\"\\n        );\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n    }\\n\\n    function withdraw() public payable onlyOwner {\\n        for (\\n            uint funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        // Transfer vs call vs Send\\n        // payable(msg.sender).transfer(address(this).balance);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    function cheaperWithdraw() public payable onlyOwner {\\n        address[] memory funders = s_funders;\\n        // mappings can't be in memory, sorry!\\n        for (\\n            uint funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        // payable(msg.sender).transfer(address(this).balance);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    // /** @notice Gets the amount that an address has funded\\n    //  *  @param fundingAddress the address of the funder\\n    //  *  @return the amount funded\\n    //  */\\n    // function getAddressToAmountFunded(address fundingAddress)\\n    //     public\\n    //     view\\n    //     returns (uint)\\n    // {\\n    //     return s_addressToAmountFunded[fundingAddress];\\n    //}\\n\\n    function getFunder(uint index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0x40ccc0445e87b7375274dfceb7d12e0edce84c43b368decf13e91bdf92d1ad83\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n    function getPrice(AggregatorV3Interface _priceFeed)\\n        public\\n        view\\n        returns (uint)\\n    {\\n        (, int price, , , ) = _priceFeed.latestRoundData();\\n        return uint(price);\\n    }\\n\\n    function getConversionRate(uint ethAmount, AggregatorV3Interface _priceFeed)\\n        internal\\n        view\\n        returns (uint)\\n    {\\n        uint perEthPrice = getPrice(_priceFeed);\\n        uint PriceAfterConverting = (perEthPrice * ethAmount) /\\n            1000000000000000000;\\n        return PriceAfterConverting;\\n    }\\n}\\n\",\"keccak256\":\"0x62043bedcd1106e4ad0994ad770c1b7e90a49ce6aacc213731c6f5b0f3f09d3c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051611087380380611087833981810160405281019061003291906100c5565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505050610137565b6000815190506100bf81610120565b92915050565b6000602082840312156100d757600080fd5b60006100e5848285016100b0565b91505092915050565b60006100f982610100565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b610129816100ee565b811461013457600080fd5b50565b60805160601c610f16610171600039600081816101b3015281816103650152818161040b0152818161059601526107ab0152610f166000f3fe60806040526004361061007b5760003560e01c80639e87a5cd1161004e5780639e87a5cd1461011d578063b60d428814610148578063be2693f014610152578063d7b4750c1461015c5761007b565b80631bf6132d146100805780633ccfd60b146100bd5780636b69a592146100c7578063893d20e8146100f2575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a29190610a8a565b610199565b6040516100b49190610c45565b60405180910390f35b6100c56101b1565b005b3480156100d357600080fd5b506100dc6103fa565b6040516100e99190610c45565b60405180910390f35b3480156100fe57600080fd5b50610107610407565b6040516101149190610bef565b60405180910390f35b34801561012957600080fd5b5061013261042f565b60405161013f9190610c0a565b60405180910390f35b610150610459565b005b61015a610594565b005b34801561016857600080fd5b50610183600480360381019061017e9190610ab3565b610841565b6040516101909190610bef565b60405180910390f35b60016020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461020957600080fd5b60005b6000805490508110156102da576000808281548110610254577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806102d290610ddd565b91505061020c565b50600067ffffffffffffffff81111561031c577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561034a5781602001602082028036833780820191505090505b506000908051906020019061036092919061097a565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516103a790610bda565b60006040518083038185875af1925050503d80600081146103e4576040519150601f19603f3d011682016040523d82523d6000602084013e6103e9565b606091505b50509050806103f757600080fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b1880000610498600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108ae90919063ffffffff16565b10156104d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d090610c25565b60405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105289190610c7c565b925050819055506000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105ec57600080fd5b60008080548060200260200160405190810160405280929190818152602001828054801561066f57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610625575b5050505050905060005b81518110156107205760008282815181106106bd577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061071890610ddd565b915050610679565b50600067ffffffffffffffff811115610762577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156107905781602001602082028036833780820191505090505b50600090805190602001906107a692919061097a565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516107ed90610bda565b60006040518083038185875af1925050503d806000811461082a576040519150601f19603f3d011682016040523d82523d6000602084013e61082f565b606091505b505090508061083d57600080fd5b5050565b600080828154811061087c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108ba836108ea565b90506000670de0b6b3a764000085836108d39190610d03565b6108dd9190610cd2565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561093357600080fd5b505afa158015610947573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096b9190610adc565b50505091505080915050919050565b8280548282559060005260206000209081019282156109f3579160200282015b828111156109f25782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061099a565b5b509050610a009190610a04565b5090565b5b80821115610a1d576000816000905550600101610a05565b5090565b600081359050610a3081610e84565b92915050565b600081519050610a4581610e9b565b92915050565b600081359050610a5a81610eb2565b92915050565b600081519050610a6f81610eb2565b92915050565b600081519050610a8481610ec9565b92915050565b600060208284031215610a9c57600080fd5b6000610aaa84828501610a21565b91505092915050565b600060208284031215610ac557600080fd5b6000610ad384828501610a4b565b91505092915050565b600080600080600060a08688031215610af457600080fd5b6000610b0288828901610a75565b9550506020610b1388828901610a36565b9450506040610b2488828901610a60565b9350506060610b3588828901610a60565b9250506080610b4688828901610a75565b9150509295509295909350565b610b5c81610d5d565b82525050565b610b6b81610db9565b82525050565b6000610b7e601b83610c6b565b91507f596f75206e65656420746f207370656e64206d6f7265204554482100000000006000830152602082019050919050565b6000610bbe600083610c60565b9150600082019050919050565b610bd481610d99565b82525050565b6000610be582610bb1565b9150819050919050565b6000602082019050610c046000830184610b53565b92915050565b6000602082019050610c1f6000830184610b62565b92915050565b60006020820190508181036000830152610c3e81610b71565b9050919050565b6000602082019050610c5a6000830184610bcb565b92915050565b600081905092915050565b600082825260208201905092915050565b6000610c8782610d99565b9150610c9283610d99565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610cc757610cc6610e26565b5b828201905092915050565b6000610cdd82610d99565b9150610ce883610d99565b925082610cf857610cf7610e55565b5b828204905092915050565b6000610d0e82610d99565b9150610d1983610d99565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610d5257610d51610e26565b5b828202905092915050565b6000610d6882610d79565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b6000610dc482610dcb565b9050919050565b6000610dd682610d79565b9050919050565b6000610de882610d99565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610e1b57610e1a610e26565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b610e8d81610d5d565b8114610e9857600080fd5b50565b610ea481610d6f565b8114610eaf57600080fd5b50565b610ebb81610d99565b8114610ec657600080fd5b50565b610ed281610da3565b8114610edd57600080fd5b5056fea26469706673582212202520f6ea5835779b20098fcd8b6ba5f1bb45d802a420e26c66cd6c1d58a148f264736f6c63430008000033",
  "deployedBytecode": "0x60806040526004361061007b5760003560e01c80639e87a5cd1161004e5780639e87a5cd1461011d578063b60d428814610148578063be2693f014610152578063d7b4750c1461015c5761007b565b80631bf6132d146100805780633ccfd60b146100bd5780636b69a592146100c7578063893d20e8146100f2575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a29190610a8a565b610199565b6040516100b49190610c45565b60405180910390f35b6100c56101b1565b005b3480156100d357600080fd5b506100dc6103fa565b6040516100e99190610c45565b60405180910390f35b3480156100fe57600080fd5b50610107610407565b6040516101149190610bef565b60405180910390f35b34801561012957600080fd5b5061013261042f565b60405161013f9190610c0a565b60405180910390f35b610150610459565b005b61015a610594565b005b34801561016857600080fd5b50610183600480360381019061017e9190610ab3565b610841565b6040516101909190610bef565b60405180910390f35b60016020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461020957600080fd5b60005b6000805490508110156102da576000808281548110610254577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806102d290610ddd565b91505061020c565b50600067ffffffffffffffff81111561031c577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561034a5781602001602082028036833780820191505090505b506000908051906020019061036092919061097a565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516103a790610bda565b60006040518083038185875af1925050503d80600081146103e4576040519150601f19603f3d011682016040523d82523d6000602084013e6103e9565b606091505b50509050806103f757600080fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b1880000610498600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108ae90919063ffffffff16565b10156104d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d090610c25565b60405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105289190610c7c565b925050819055506000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105ec57600080fd5b60008080548060200260200160405190810160405280929190818152602001828054801561066f57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610625575b5050505050905060005b81518110156107205760008282815181106106bd577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061071890610ddd565b915050610679565b50600067ffffffffffffffff811115610762577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156107905781602001602082028036833780820191505090505b50600090805190602001906107a692919061097a565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516107ed90610bda565b60006040518083038185875af1925050503d806000811461082a576040519150601f19603f3d011682016040523d82523d6000602084013e61082f565b606091505b505090508061083d57600080fd5b5050565b600080828154811061087c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108ba836108ea565b90506000670de0b6b3a764000085836108d39190610d03565b6108dd9190610cd2565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561093357600080fd5b505afa158015610947573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096b9190610adc565b50505091505080915050919050565b8280548282559060005260206000209081019282156109f3579160200282015b828111156109f25782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061099a565b5b509050610a009190610a04565b5090565b5b80821115610a1d576000816000905550600101610a05565b5090565b600081359050610a3081610e84565b92915050565b600081519050610a4581610e9b565b92915050565b600081359050610a5a81610eb2565b92915050565b600081519050610a6f81610eb2565b92915050565b600081519050610a8481610ec9565b92915050565b600060208284031215610a9c57600080fd5b6000610aaa84828501610a21565b91505092915050565b600060208284031215610ac557600080fd5b6000610ad384828501610a4b565b91505092915050565b600080600080600060a08688031215610af457600080fd5b6000610b0288828901610a75565b9550506020610b1388828901610a36565b9450506040610b2488828901610a60565b9350506060610b3588828901610a60565b9250506080610b4688828901610a75565b9150509295509295909350565b610b5c81610d5d565b82525050565b610b6b81610db9565b82525050565b6000610b7e601b83610c6b565b91507f596f75206e65656420746f207370656e64206d6f7265204554482100000000006000830152602082019050919050565b6000610bbe600083610c60565b9150600082019050919050565b610bd481610d99565b82525050565b6000610be582610bb1565b9150819050919050565b6000602082019050610c046000830184610b53565b92915050565b6000602082019050610c1f6000830184610b62565b92915050565b60006020820190508181036000830152610c3e81610b71565b9050919050565b6000602082019050610c5a6000830184610bcb565b92915050565b600081905092915050565b600082825260208201905092915050565b6000610c8782610d99565b9150610c9283610d99565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610cc757610cc6610e26565b5b828201905092915050565b6000610cdd82610d99565b9150610ce883610d99565b925082610cf857610cf7610e55565b5b828204905092915050565b6000610d0e82610d99565b9150610d1983610d99565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610d5257610d51610e26565b5b828202905092915050565b6000610d6882610d79565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b6000610dc482610dcb565b9050919050565b6000610dd682610d79565b9050919050565b6000610de882610d99565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610e1b57610e1a610e26565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b610e8d81610d5d565b8114610e9857600080fd5b50565b610ea481610d6f565b8114610eaf57600080fd5b50565b610ebb81610d99565b8114610ec657600080fd5b50565b610ed281610da3565b8114610edd57600080fd5b5056fea26469706673582212202520f6ea5835779b20098fcd8b6ba5f1bb45d802a420e26c66cd6c1d58a148f264736f6c63430008000033",
  "devdoc": {
    "author": "Patrick Collins",
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {},
    "title": "A sample Funding Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "Funds our contract based on the ETH/USD price"
      }
    },
    "notice": "This contract is for creating a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 66,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 70,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 73,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}